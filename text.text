Phase 2: Todos Redux Structure

In this phase you will create a Redux loop, including a store with reducers, action creators and constants.

State Shape

We want to build a state that allows us to easily add, remove, and update todos. If we stored our list of todos in an array, then querying, updating and deleting any todo would be O(n). Using a hash to store our todos yields O(1) for the same operations given the id of any todo.

So the todos slice of our application might look something like this:

{
  1: {
    id: 1,
    title: 'wash car',
    body: 'with soap',
    done: false
  },
  2: {
    id: 2,
    title: 'wash dog',
    body: 'with shampoo',
    done: true
  },
}
NB: todo.id is used as the primary identifier i.e. object key.

Action Creators

Let's write a couple action creators. These are functions that will create the Redux actions that will later tell your todosReducer how to update the state. The first one will receive todos and populate the store, and the second one will receive a single todo and either add or update a single todo in the store.

Remember that:

Redux actions are plain-old javascript objects that have a type property.
Action creators don't directly interact with reducers or the store, they simply return action objects.
These returned action objects are passed through our rootReducer only when store.dispatch(action) is called.
Create a file actions/todo_actions.js that will house our action creators and action type constants.

Action Type Constants

We use constants to represent action types. They are used whenever action types are being set or read (i.e. in our action creators and in the switch statements in our reducers and middleware).

Create and export RECEIVE_TODOS and RECEIVE_TODO action types like this

export const RECEIVE_TODOS = 'RECEIVE_TODOS';
export const RECEIVE_TODO = 'RECEIVE_TODO';
receiveTodos

This action creator lets our reducer know to reset the list of todos and, as such, will also need to pass along a new set of todos. Write your receiveTodos action creator so that it accepts an array argument todos. It should return an action object with a type property pointing to RECEIVE_TODOS and a todos property pointing to the todos argument you're passing in. This represents all of our todos data.

receiveTodo

This action creator is formatted in the same way as receiveTodos, but accepts an argument/has a property of just a single todo. Write this out now. We will describe its function later.

Reducers

todosReducer

Redux reducers manage the shape of our application state.

Create and export your todosReducer in a file reducers/todos_reducer.js.
A Redux reducer accepts two arguments:

state - the previous application state.
action - the action object being dispatched.
Remember that reducers should:

Return the initial state if the state argument is undefined.
Return the state if the reducer doesn't care about the action.
Return a new state object if the reducer cares about the action.
N.B. The reducer must never mutate the previous state. Instead, it should return a brand new state object with the necessary changes.

Let's start by setting up our todosReducer to return its default state - an empty object with no todos. Do not move on to the other cases just yet:

const todosReducer = (state = {}, action) => {
  switch(action.type) {
    default:
      return state;
  }
};

export default todosReducer;
rootReducer

Create a new file, reducers/root_reducer.js.
This file will be responsible for combining our multiple, domain-specific reducers. It will export default a single rootReducer.
Import combineReducers from redux.
Import your todosReducer function.
Create a rootReducer using combineReducers.
So far, our default application state looks like this:

{
  todos: {}
}
Redux Store

A Redux store holds a reference to an application state. The store handles updating state when actions are dispatched and tells the necessary components to re-render. Let's create our Redux store.

Create a new file, store/store.js
Refer to the store reading if needed
Import createStore from the redux library
Import rootReducer
Create a function configureStore which calls createStore with the rootReducer
NB: While configureStore may seem meaningless now, it is a pattern we will be following throughout the course. This will come in handy when we begin working with preloadedState and middlewares, or if you want to use hot-module replacement or other snazzy add-ons.
Export configureStore
Test your code - Import the store to your entry file. Create your store by calling configureStore, set window.store = store and call window.store.getState() in your console. Make sure that this function returns the initial application state described above. Don't move on until it does!

NB: Keeping your store on the window while working on a Redux app is a very handy and quick way to ensure that your state is changing the way you expect it to given any user interaction, AJAX call, Redux action. However, you should only do this while developing, be sure to remove it later.

Try setting a initial value for state in your todosReducer. Feel free to use this as a template.

// reducers/todos_reducer.js
const initialState = {
  1: {
    id: 1,
    title: 'wash car',
    body: 'with soap',
    done: false
  },
  2: {
    id: 2,
    title: 'wash dog',
    body: 'with shampoo',
    done: true
  },
};

const todosReducer = (state = initialState, action) => {
  //...
}
It isn't typical to have so much data in the initial state, but it will speed up our development to have some real todos to test our code on.

Test your code - Try calling window.store.getState() again from the console. Does your store's initial state match the default state you defined?

Receiving and Reducing todos

Now that you have a functioning store, let's test out those actions we created earlier. Inside of the todosReducer, implement the following.

Import action constants RECEIVE_TODOS and RECEIVE_TODO.
Add a new case to the switch statement in your todosReducer
This case should execute if the action.type is RECEIVE_TODOS
The todos data in your store should be replaced by the data in action.todos
Do not merge the old todos state with the new todos coming in
Add another case to the switch statement to handle RECEIVE_TODO
This case should return a new state object, either adding the todo in the action to the previous state, or replacing a todo in the previous state at the same object key.
You do not need an if/else statement for this functionality.
Remember, you must not mutate state! If you want to change a data structure you must copy it first. The built in Object.assign method is perfect for this. Just make sure the first argument is a new blank object to avoid mutations.

Your reducer should look something like this.

const todosReducer = (state = initialState, action) => {
  switch(action.type) {
    case RECEIVE_TODOS:
      const newState = {};
      // iterating through action.todos setting a key value pair for each one in the new state.
      // return the new state
    case RECEIVE_TODO:
      // Make a new object setting a single key value pair for action.todo
      // Return a new state object by merging your previous state and your new object
    default:
      return state;
  }
};
Test your code!
